{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMsbgni0V0/9VFvNEIp2spn",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/JS121000/BERLIN200/blob/main/projectberlin.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Load the users data\n",
        "users_df = pd.read_csv('users.csv')\n",
        "\n",
        "# Clean up the 'company' column\n",
        "users_df['company'] = (\n",
        "    users_df['company']\n",
        "    .str.strip()                 # Trim whitespace\n",
        "    .str.lstrip('@')             # Remove leading '@'\n",
        "    .str.upper()                 # Convert to uppercase\n",
        ")\n",
        "\n",
        "# Drop rows with missing company names and get the most frequent company\n",
        "top_company = (\n",
        "    users_df.dropna(subset=['company'])\n",
        "    .company.value_counts()\n",
        "    .idxmax()\n",
        ")\n",
        "\n",
        "print(top_company)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KksRVTjjS2ss",
        "outputId": "c91cfd1c-373d-45b0-c6c6-29c37cf77783"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "MICROSOFT\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Load the repositories data\n",
        "repos_df = pd.read_csv('repositories.csv')\n",
        "\n",
        "# Drop missing values in the 'language' column and find the most common language\n",
        "top_language = (\n",
        "    repos_df.dropna(subset=['language'])\n",
        "    .language.value_counts()\n",
        "    .idxmax()\n",
        ")\n",
        "\n",
        "print(top_language)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4jL4lW2NT3dg",
        "outputId": "07102a11-ec83-4b9d-abcf-52e65f31e644"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "JavaScript\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Load data\n",
        "users_df = pd.read_csv('users.csv')\n",
        "repos_df = pd.read_csv('repositories.csv')\n",
        "\n",
        "# Filter users who joined after 2020\n",
        "users_df['created_at'] = pd.to_datetime(users_df['created_at'])\n",
        "recent_users = users_df[users_df['created_at'] > '2020-12-31']\n",
        "\n",
        "# Merge with repositories to link with recent users\n",
        "recent_user_repos = pd.merge(recent_users[['login']], repos_df, on='login', how='inner')\n",
        "\n",
        "# Filter out rows without a language and find the second most popular language\n",
        "second_top_language = (\n",
        "    recent_user_repos.dropna(subset=['language'])\n",
        "    .language.value_counts()\n",
        "    .nlargest(2)  # Get the top 2 languages\n",
        "    .index[1]     # Select the second most common language\n",
        ")\n",
        "\n",
        "print(second_top_language)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uuP-MD8PT9UG",
        "outputId": "9c4848cf-303d-42e9-88c1-94e0a8ac1acb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "HCL\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Load the repositories.csv file\n",
        "repositories_df = pd.read_csv(\"repositories.csv\")\n",
        "\n",
        "# Group by language and calculate the average number of stars per language\n",
        "average_stars_per_language = repositories_df.groupby('language')['stargazers_count'].mean()\n",
        "\n",
        "# Find the language with the highest average stars\n",
        "highest_avg_language = average_stars_per_language.idxmax()\n",
        "highest_avg_stars = average_stars_per_language.max()\n",
        "\n",
        "print(f\"Language with the highest average stars per repository: {highest_avg_language} ({highest_avg_stars} stars)\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rKXzf59kU3XR",
        "outputId": "a5d56dc5-09df-44f9-c683-2045b04577e5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Language with the highest average stars per repository: Fluent (12957.0 stars)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Load the users.csv file\n",
        "users_df = pd.read_csv(\"users.csv\")\n",
        "\n",
        "# Convert 'followers' and 'following' to numeric, coercing errors to NaN\n",
        "users_df['followers'] = pd.to_numeric(users_df['followers'], errors='coerce')\n",
        "users_df['following'] = pd.to_numeric(users_df['following'], errors='coerce')\n",
        "\n",
        "# Drop rows with NaN values in either 'followers' or 'following'\n",
        "users_df = users_df.dropna(subset=['followers', 'following'])\n",
        "\n",
        "# Calculate leader_strength\n",
        "users_df['leader_strength'] = users_df['followers'] / (1 + users_df['following'])\n",
        "\n",
        "# Sort by leader_strength in descending order and get the top 5\n",
        "top_5_users = users_df.sort_values(by='leader_strength', ascending=False).head(5)\n",
        "\n",
        "# Extract the 'login' column and output as a comma-separated string\n",
        "top_5_logins = \", \".join(top_5_users['login'])\n",
        "print(top_5_logins)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kGtijntJVUxW",
        "outputId": "9aeaa446-cef7-4beb-c301-c7ac430e53a9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "lewagon, prisma, peterbourgon, KittyGiraudel, cure53\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Load the users data\n",
        "users_df = pd.read_csv('users.csv')\n",
        "\n",
        "# Ensure 'followers' and 'public_repos' columns are numeric, coercing errors to NaN\n",
        "users_df['followers'] = pd.to_numeric(users_df['followers'], errors='coerce')\n",
        "users_df['public_repos'] = pd.to_numeric(users_df['public_repos'], errors='coerce')\n",
        "\n",
        "# Drop rows with NaN values in 'followers' or 'public_repos' columns\n",
        "users_df = users_df.dropna(subset=['followers', 'public_repos'])\n",
        "\n",
        "# Calculate the correlation between 'followers' and 'public_repos'\n",
        "correlation = users_df['followers'].corr(users_df['public_repos'])\n",
        "\n",
        "# Print the correlation to 3 decimal places\n",
        "print(f\"Correlation between followers and public repositories: {correlation:.3f}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "j-2AnBb9WYA1",
        "outputId": "4d7d960d-049f-492b-9b66-90dfb908eb0d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Correlation between followers and public repositories: 0.045\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from sklearn.linear_model import LinearRegression\n",
        "\n",
        "# Load the users data\n",
        "users_df = pd.read_csv('users.csv')\n",
        "\n",
        "# Ensure 'followers' and 'public_repos' columns are numeric, coercing errors to NaN\n",
        "users_df['followers'] = pd.to_numeric(users_df['followers'], errors='coerce')\n",
        "users_df['public_repos'] = pd.to_numeric(users_df['public_repos'], errors='coerce')\n",
        "\n",
        "# Drop rows with NaN values in 'followers' or 'public_repos' columns\n",
        "users_df = users_df.dropna(subset=['followers', 'public_repos'])\n",
        "\n",
        "# Prepare the data for regression\n",
        "X = users_df[['public_repos']]  # Independent variable\n",
        "y = users_df['followers']       # Dependent variable\n",
        "\n",
        "# Fit a linear regression model\n",
        "model = LinearRegression()\n",
        "model.fit(X, y)\n",
        "\n",
        "# Get the slope (coefficient for 'public_repos')\n",
        "slope = model.coef_[0]\n",
        "\n",
        "# Print the slope to 3 decimal places\n",
        "print(f\"Regression slope of followers on repos: {slope:.3f}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "szVeB10DWfPk",
        "outputId": "2d3a8073-5a48-4b75-90aa-36da79848c6e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Regression slope of followers on repos: 0.281\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Load the repositories data\n",
        "repositories_df = pd.read_csv('repositories.csv')\n",
        "\n",
        "# Ensure 'has_projects' and 'has_wiki' columns are boolean\n",
        "repositories_df['has_projects'] = repositories_df['has_projects'].astype(bool)\n",
        "repositories_df['has_wiki'] = repositories_df['has_wiki'].astype(bool)\n",
        "\n",
        "# Calculate the correlation between 'has_projects' and 'has_wiki'\n",
        "correlation = repositories_df['has_projects'].corr(repositories_df['has_wiki'])\n",
        "\n",
        "# Print the correlation to 3 decimal places\n",
        "print(f\"Correlation between projects and wiki enabled: {correlation:.3f}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EthzRSOGW3B2",
        "outputId": "9cfa79eb-1a20-496a-d592-6ff3430d52be"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Correlation between projects and wiki enabled: 0.388\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Load the users data\n",
        "users_df = pd.read_csv('users.csv')\n",
        "\n",
        "# Ensure the 'hireable' column is a boolean (if it's not already)\n",
        "users_df['hireable'] = users_df['hireable'].astype(bool)\n",
        "\n",
        "# Convert 'following' column to numeric, coercing errors to NaN\n",
        "users_df['following'] = pd.to_numeric(users_df['following'], errors='coerce')\n",
        "\n",
        "# Check how many hireable and non-hireable users exist\n",
        "num_hireable = users_df['hireable'].sum()\n",
        "num_non_hireable = (~users_df['hireable']).sum()\n",
        "\n",
        "print(f\"Number of hireable users: {num_hireable}\")\n",
        "print(f\"Number of non-hireable users: {num_non_hireable}\")\n",
        "\n",
        "# Calculate the average following for hireable users\n",
        "average_following_hireable = users_df[users_df['hireable']]['following'].mean()\n",
        "\n",
        "# Calculate the average following for non-hireable users\n",
        "average_following_non_hireable = users_df[~users_df['hireable']]['following'].mean()\n",
        "\n",
        "# Calculate the difference\n",
        "difference = average_following_hireable - average_following_non_hireable\n",
        "\n",
        "# Print the average following values and the difference\n",
        "print(f\"Average following for hireable users: {average_following_hireable:.3f}\")\n",
        "print(f\"Average following for non-hireable users: {average_following_non_hireable:.3f}\")\n",
        "print(f\"Difference in average following (hireable - non-hireable): {difference:.3f}\")\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rXU6Ssq6XB5m",
        "outputId": "96bee2e7-3729-4bed-9d39-09c6c917aa2b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of hireable users: 599\n",
            "Number of non-hireable users: 0\n",
            "Average following for hireable users: 113.682\n",
            "Average following for non-hireable users: nan\n",
            "Difference in average following (hireable - non-hireable): nan\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import statsmodels.api as sm\n",
        "\n",
        "# Sample data\n",
        "data = {\n",
        "    \"bio\": [\n",
        "        \"I am a developer with a passion for coding.\",\n",
        "        \"Loves open-source contributions and community engagement.\",\n",
        "        \"Expert in Python, JavaScript, and DevOps.\",\n",
        "        \"Coding enthusiast who loves challenges.\",\n",
        "        \"\",  # Exclude this\n",
        "    ],\n",
        "    \"followers\": [150, 200, 300, 120, 100]  # Dummy follower counts\n",
        "}\n",
        "\n",
        "# Create DataFrame\n",
        "df = pd.DataFrame(data)\n",
        "\n",
        "# Remove rows with empty bios\n",
        "df = df[df['bio'].str.strip() != \"\"]\n",
        "\n",
        "# Calculate bio word count\n",
        "df['bio_word_count'] = df['bio'].apply(lambda x: len(x.split()))\n",
        "\n",
        "# Prepare data for regression\n",
        "X = df[['bio_word_count']]\n",
        "y = df['followers']\n",
        "\n",
        "# Add constant to the model (intercept)\n",
        "X = sm.add_constant(X)\n",
        "\n",
        "# Fit regression model\n",
        "model = sm.OLS(y, X).fit()\n",
        "\n",
        "# Get the slope (coefficient for bio_word_count)\n",
        "slope = model.params['bio_word_count']\n",
        "print(f\"Slope of followers on bio word count: {slope:.3f}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5da88dlVXwYe",
        "outputId": "d7c4b324-588f-436e-d6c2-00c70dafb67f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Slope of followers on bio word count: -6.111\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Load the repositories data\n",
        "repositories_df = pd.read_csv('repositories.csv')\n",
        "\n",
        "# Convert the 'created_at' column to datetime\n",
        "repositories_df['created_at'] = pd.to_datetime(repositories_df['created_at'])\n",
        "\n",
        "# Filter for repositories created on weekends (Saturday = 5, Sunday = 6)\n",
        "repositories_df['day_of_week'] = repositories_df['created_at'].dt.dayofweek\n",
        "weekend_repos = repositories_df[repositories_df['day_of_week'].isin([5, 6])]\n",
        "\n",
        "# Group by user login and count the number of repositories created\n",
        "user_repo_counts = weekend_repos.groupby('login').size().reset_index(name='repo_count')\n",
        "\n",
        "# Sort the users by the number of repositories in descending order and get the top 5\n",
        "top_users = user_repo_counts.sort_values(by='repo_count', ascending=False).head(5)\n",
        "\n",
        "# Extract the logins of the top users and join them into a comma-separated string\n",
        "top_users_logins = ', '.join(top_users['login'])\n",
        "\n",
        "# Print the result\n",
        "print(top_users_logins)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0FiE_wXPYTRu",
        "outputId": "a5808716-b7a9-459f-d764-a2bbe2e5f48d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "saschanaz, jamesmunns, sunsided, meh, ligi\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "users_df = pd.read_csv('users.csv')\n",
        "users_df\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "yHkIrWUTYkLt",
        "outputId": "806cd3c8-035a-4bec-a0d8-562e5ef31486"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          login                name             company  \\\n",
              "0         aarlt      Alexander Arlt       ARLT-LABS.COM   \n",
              "1    devonestes         Devon Estes              V7LABS   \n",
              "2    manuelbieh         Manuel Bieh  WIREMORE @UNBOGIFY   \n",
              "3           irh          Ian Hobson                 NaN   \n",
              "4     s-soroosh  Soroosh Sarabadani             SHOPIFY   \n",
              "..          ...                 ...                 ...   \n",
              "594   armancodv       Arman Kolahan               UNITE   \n",
              "595      prisma              Prisma                 NaN   \n",
              "596     apaszke         Adam Paszke              GOOGLE   \n",
              "597     lewagon            Le Wagon                 NaN   \n",
              "598  codebytere        Shelley Vohr           MICROSOFT   \n",
              "\n",
              "                         location                         email hireable  \\\n",
              "0                          Berlin                           NaN      NaN   \n",
              "1                 Berlin, Germany       devon.c.estes@gmail.com      NaN   \n",
              "2                          Berlin          github@manuelbieh.de     TRUE   \n",
              "3                 Berlin, Germany                           NaN      NaN   \n",
              "4                          Berlin  soroosh.sarabadani@gmail.com     TRUE   \n",
              "..                            ...                           ...      ...   \n",
              "594               Berlin, Germany            akolahan@gmail.com     TRUE   \n",
              "595            Berlin & Worldwide               hello@prisma.io      NaN   \n",
              "596               Berlin, Germany         adam.paszke@gmail.com      NaN   \n",
              "597  Paris, London, Berlin & more           contact@lewagon.com      NaN   \n",
              "598                        Berlin        shelley.vohr@gmail.com      NaN   \n",
              "\n",
              "                                                   bio  public_repos  \\\n",
              "0       I'm a freelance software engineer from Berlin.          43.0   \n",
              "1    @elixir-lang developer. Maintainer of Muzak, @...          74.0   \n",
              "2    Freelance JavaScript Developer from Berlin. Yo...          83.0   \n",
              "3                                                  NaN          46.0   \n",
              "4              Senior Staff Software Engineer @Shopify         123.0   \n",
              "..                                                 ...           ...   \n",
              "594  Lead Frontend Engineer proficient in TypeScrip...          51.0   \n",
              "595           Prisma makes working with databases easy         152.0   \n",
              "596    Author of PyTorch. Research Scientist @ Google.          73.0   \n",
              "597  Coding School bringing Technical Skills to Cre...         175.0   \n",
              "598  core eng @electron. collaborator @nodejs. orga...         105.0   \n",
              "\n",
              "    followers  following            created_at  \n",
              "0         250        9.0  2013-07-14T22:02:05Z  \n",
              "1         250        4.0  2014-08-12T00:21:54Z  \n",
              "2         249       51.0  2010-04-08T13:40:20Z  \n",
              "3         249        6.0  2011-07-12T12:18:43Z  \n",
              "4         248       19.0  2011-04-13T11:43:41Z  \n",
              "..        ...        ...                   ...  \n",
              "594      3226     5566.0  2014-10-23T07:22:44Z  \n",
              "595      3570        0.0  2016-02-13T15:22:35Z  \n",
              "596      3722       11.0  2013-05-31T20:51:12Z  \n",
              "597      3636        0.0  2013-09-16T13:20:52Z  \n",
              "598      3610       10.0  2012-07-24T19:05:37Z  \n",
              "\n",
              "[599 rows x 11 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c4a26035-ae27-40c9-9697-92a6fadc03ff\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>login</th>\n",
              "      <th>name</th>\n",
              "      <th>company</th>\n",
              "      <th>location</th>\n",
              "      <th>email</th>\n",
              "      <th>hireable</th>\n",
              "      <th>bio</th>\n",
              "      <th>public_repos</th>\n",
              "      <th>followers</th>\n",
              "      <th>following</th>\n",
              "      <th>created_at</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>aarlt</td>\n",
              "      <td>Alexander Arlt</td>\n",
              "      <td>ARLT-LABS.COM</td>\n",
              "      <td>Berlin</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>I'm a freelance software engineer from Berlin.</td>\n",
              "      <td>43.0</td>\n",
              "      <td>250</td>\n",
              "      <td>9.0</td>\n",
              "      <td>2013-07-14T22:02:05Z</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>devonestes</td>\n",
              "      <td>Devon Estes</td>\n",
              "      <td>V7LABS</td>\n",
              "      <td>Berlin, Germany</td>\n",
              "      <td>devon.c.estes@gmail.com</td>\n",
              "      <td>NaN</td>\n",
              "      <td>@elixir-lang developer. Maintainer of Muzak, @...</td>\n",
              "      <td>74.0</td>\n",
              "      <td>250</td>\n",
              "      <td>4.0</td>\n",
              "      <td>2014-08-12T00:21:54Z</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>manuelbieh</td>\n",
              "      <td>Manuel Bieh</td>\n",
              "      <td>WIREMORE @UNBOGIFY</td>\n",
              "      <td>Berlin</td>\n",
              "      <td>github@manuelbieh.de</td>\n",
              "      <td>TRUE</td>\n",
              "      <td>Freelance JavaScript Developer from Berlin. Yo...</td>\n",
              "      <td>83.0</td>\n",
              "      <td>249</td>\n",
              "      <td>51.0</td>\n",
              "      <td>2010-04-08T13:40:20Z</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>irh</td>\n",
              "      <td>Ian Hobson</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Berlin, Germany</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>46.0</td>\n",
              "      <td>249</td>\n",
              "      <td>6.0</td>\n",
              "      <td>2011-07-12T12:18:43Z</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>s-soroosh</td>\n",
              "      <td>Soroosh Sarabadani</td>\n",
              "      <td>SHOPIFY</td>\n",
              "      <td>Berlin</td>\n",
              "      <td>soroosh.sarabadani@gmail.com</td>\n",
              "      <td>TRUE</td>\n",
              "      <td>Senior Staff Software Engineer @Shopify</td>\n",
              "      <td>123.0</td>\n",
              "      <td>248</td>\n",
              "      <td>19.0</td>\n",
              "      <td>2011-04-13T11:43:41Z</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>594</th>\n",
              "      <td>armancodv</td>\n",
              "      <td>Arman Kolahan</td>\n",
              "      <td>UNITE</td>\n",
              "      <td>Berlin, Germany</td>\n",
              "      <td>akolahan@gmail.com</td>\n",
              "      <td>TRUE</td>\n",
              "      <td>Lead Frontend Engineer proficient in TypeScrip...</td>\n",
              "      <td>51.0</td>\n",
              "      <td>3226</td>\n",
              "      <td>5566.0</td>\n",
              "      <td>2014-10-23T07:22:44Z</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>595</th>\n",
              "      <td>prisma</td>\n",
              "      <td>Prisma</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Berlin &amp; Worldwide</td>\n",
              "      <td>hello@prisma.io</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Prisma makes working with databases easy</td>\n",
              "      <td>152.0</td>\n",
              "      <td>3570</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2016-02-13T15:22:35Z</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>596</th>\n",
              "      <td>apaszke</td>\n",
              "      <td>Adam Paszke</td>\n",
              "      <td>GOOGLE</td>\n",
              "      <td>Berlin, Germany</td>\n",
              "      <td>adam.paszke@gmail.com</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Author of PyTorch. Research Scientist @ Google.</td>\n",
              "      <td>73.0</td>\n",
              "      <td>3722</td>\n",
              "      <td>11.0</td>\n",
              "      <td>2013-05-31T20:51:12Z</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>597</th>\n",
              "      <td>lewagon</td>\n",
              "      <td>Le Wagon</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Paris, London, Berlin &amp; more</td>\n",
              "      <td>contact@lewagon.com</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Coding School bringing Technical Skills to Cre...</td>\n",
              "      <td>175.0</td>\n",
              "      <td>3636</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2013-09-16T13:20:52Z</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>598</th>\n",
              "      <td>codebytere</td>\n",
              "      <td>Shelley Vohr</td>\n",
              "      <td>MICROSOFT</td>\n",
              "      <td>Berlin</td>\n",
              "      <td>shelley.vohr@gmail.com</td>\n",
              "      <td>NaN</td>\n",
              "      <td>core eng @electron. collaborator @nodejs. orga...</td>\n",
              "      <td>105.0</td>\n",
              "      <td>3610</td>\n",
              "      <td>10.0</td>\n",
              "      <td>2012-07-24T19:05:37Z</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>599 rows × 11 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c4a26035-ae27-40c9-9697-92a6fadc03ff')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c4a26035-ae27-40c9-9697-92a6fadc03ff button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c4a26035-ae27-40c9-9697-92a6fadc03ff');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-dedfc7c6-1f84-4718-93e1-52291093fad2\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-dedfc7c6-1f84-4718-93e1-52291093fad2')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-dedfc7c6-1f84-4718-93e1-52291093fad2 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_2139a3ce-10d3-4e18-b89b-9a96b655c07a\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('users_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_2139a3ce-10d3-4e18-b89b-9a96b655c07a button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('users_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "users_df",
              "summary": "{\n  \"name\": \"users_df\",\n  \"rows\": 599,\n  \"fields\": [\n    {\n      \"column\": \"login\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 591,\n        \"samples\": [\n          \"ptaoussanis\",\n          \"armancodv\",\n          \"OskarStark\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 580,\n        \"samples\": [\n          \"Arman Kolahan\",\n          \"Juraci Paix\\u00e3o Kr\\u00f6hling\",\n          \"DK\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"company\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 300,\n        \"samples\": [\n          \"TECHNICAL UNIVERSITY OF BERLIN\",\n          \"ZEITONLINE\",\n          \"METAEBENE PERSONAL MEDIA\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"location\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 54,\n        \"samples\": [\n          \"Paris, Berlin\",\n          \"Berlin | Tokyo\",\n          \" Berlin / Bogot\\u00e1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"email\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 315,\n        \"samples\": [\n          \"nuhkocaa@gmail.com\",\n          \"github@polykit.rocks\",\n          \"fehmican.saglam@gmail.com\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hireable\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"95\",\n          \"TRUE\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bio\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 417,\n        \"samples\": [\n          \"Solidity / Blockchain Engineer\",\n          \"I put the UI in Ennui \\u2022 currently SwiftUI @apple, formerly @movingparts-io,  @Google Research & @Apple UIKit \\u2022 today your love, tomorrow the world\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"public_repos\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 89.7425486346002,\n        \"min\": 0.0,\n        \"max\": 595.0,\n        \"num_unique_values\": 225,\n        \"samples\": [\n          177.0,\n          178.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"followers\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 381,\n        \"samples\": [\n          \"730\",\n          \"483\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"following\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 325.59806492700255,\n        \"min\": 0.0,\n        \"max\": 5566.0,\n        \"num_unique_values\": 205,\n        \"samples\": [\n          86.0,\n          509.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"created_at\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 589,\n        \"samples\": [\n          \"2011-08-05T21:14:11Z\",\n          \"2009-08-26T11:05:05Z\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 59
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# prompt: Using dataframe users_df:  Who are the 5 earliest registered GitHub users in Berlin? List their login in ascending order of created_at, comma-separated.\n",
        "# Users\n",
        "\n",
        "# Filter users located in Berlin\n",
        "berlin_users = users_df[users_df.location.str.contains('Berlin', na=False)]\n",
        "\n",
        "# Sort by created_at in ascending order\n",
        "sorted_users = berlin_users.sort_values('created_at', ascending=True)\n",
        "\n",
        "# Get the login of the 5 earliest users\n",
        "earliest_5_logins = sorted_users['login'].head(5).tolist()\n",
        "\n",
        "# Convert the list to a comma-separated string\n",
        "result = ','.join(earliest_5_logins)\n",
        "\n",
        "result"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 36
        },
        "id": "h6n9ubXTgHov",
        "outputId": "14ff2980-248c-4d80-fc28-f056fe20e5b7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'adamwiggins,myobie,lstoll,znarf,mindreframer'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 61
        }
      ]
    }
  ]
}
